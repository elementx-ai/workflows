---
name: Python PR CML

on:
  workflow_call:
    inputs:
      cloud:
        required: false
        default: gcp
        type: string
      cloud-region:
        required: false
        default: us-central1-a
        type: string
      cloud-type:
        required: false
        default: n2-standard-4
        type: string
      cloud-hdd-size:
        required: false
        default: 35
        type: number
      cloud-permissions-set:
        required: true
        type: string
      command:
        required: true
        type: string
      output-dir:
        required: false
        default: output/
        type: string

    secrets:
      GCP_CREDENTIALS:
        required: true
      GOOGLE_SAINET_DATASET_BUCKET:
        required: true
      CML_GITHUB_APP_PEM:
        required: true
      CML_GITHUB_APP_ID:
        required: true

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      message: ${{ steps.get-message.outputs.message }}"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          # for pull_request so we can do HEAD^2
          fetch-depth: 2

      - name: Get commit message
        id: get-message
        run: |
          if [[ '${{ github.event_name }}' == 'push' ]]; then
            echo ::set-output name=message::$(git log --format=%B -n 1 HEAD)
          elif [[ '${{ github.event_name }}' == 'pull_request' ]]; then
            echo ::set-output name=message::$(git log --format=%B -n 1 HEAD^2)
          fi

  deploy-runner:
    runs-on: ubuntu-latest
    needs: init
    if: ${{ startsWith(needs.init.outputs.message, 'cml') || github.event_name == 'workflow_dispatch'}}
    env:
      GOOGLE_APPLICATION_CREDENTIALS_DATA: ${{ secrets.GCP_CREDENTIALS }}
    steps:
      - name: Generate Token
        uses: navikt/github-app-token-generator@v1
        id: get_token
        with:
          private-key: ${{ secrets.CML_GITHUB_APP_PEM }}
          app-id: ${{ secrets.CML_GITHUB_APP_ID }}

      - name: Insert Token into ENV
        run: echo "REPO_TOKEN=$REPO_TOKEN" >> "$GITHUB_ENV"
        env:
          REPO_TOKEN: ${{ steps.get_token.outputs.token }}

      - name: Setup CML
        uses: iterative/setup-cml@v1

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Deploy runner
        run: |
          cml runner \
            --cloud ${{ inputs.cloud }} \
            --cloud-region ${{ inputs.cloud-region }} \
            --cloud-type ${{ inputs.cloud-type }} \
            --cloud-hdd-size ${{ inputs.cloud-hdd-size }} \
            --cloud-permission-set ${{ inputs.cloud-permissions-set }} \
            --single

  cml-run-command:
    runs-on: [self-hosted, cml]
    needs: deploy-runner
    timeout-minutes: 4320
    env:
      REPO_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup CML
        uses: iterative/setup-cml@v1

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Setup Poetry
        uses: abatilo/actions-poetry@v2.1.4
        with:
          poetry-version: 1.2.0b2

      - name: Disable Poetry Virtual Env Creation
        run: poetry config virtualenvs.create false

      - name: Add Poetry Google Artifact Registry Auth Plugin
        run: poetry plugin add keyrings.google-artifactregistry-auth

      - name: debug1
        run: |
          echo $CPATH

      - name: debug2
        run: |
          echo $RUNNER_TOOL_CACHE
          ls $RUNNER_TOOL_CACHE
          echo $CPATH
          ls $CPATH
        env:
          # Add python includes from tool cache to CPATH to make building work
          CPATH: ${{ runner.tool_cache }}/Python/*/x64/include

      - name: Poetry Install
        run: poetry install
        env:
          # Add python includes from tool cache to CPATH to make building work
          CPATH: ${{ runner.tool_cache }}/Python/*/x64/include

      - name: Setup GCSFuse
        run: |
          GCSFUSE_REPO=gcsfuse-$(lsb_release -c -s)
          export GCSFUSE_REPO
          echo "deb http://packages.cloud.google.com/apt $GCSFUSE_REPO main" | sudo tee /etc/apt/sources.list.d/gcsfuse.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
          sudo apt-get update && sudo apt-get install gcsfuse

      - name: Mount Bucket
        run: |
          mkdir -p dataset-bucket
          gcsfuse --implicit-dirs ${{ secrets.GOOGLE_SAINET_DATASET_BUCKET }} dataset-bucket/

      - name: Setup GPU Drivers
        if: ${{ contains(inputs.cloud-type, 'nvidia') }}
        run: |
          curl https://raw.githubusercontent.com/GoogleCloudPlatform/compute-gpu-installation/main/linux/install_gpu_driver.py --output install_gpu_driver.py
          sudo python3 install_gpu_driver.py

      - name: Create Output Folder
        run: mkdir -p ${{ inputs.output-dir }}

      - name: Run Command
        run: ${{ inputs.command }}

      - name: Attach Output to Run
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: output
          path: ${{ inputs.output-dir }}

      - name: Unmount Bucket
        if: ${{ always() }}
        run: fusermount -u dataset-bucket/
